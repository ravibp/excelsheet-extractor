{"version":3,"sources":["components/Employee.js","actions/ActionTypes.js","actions/EmployeeActions.js","connectors/EmployeeConnector.js","components/ReactGrid.js","components/EmployeeList.js","connectors/EmployeeListConnector.js","App.js","serviceWorker.js","reducers/InitialState.js","reducers/RootReducer.js","reducers/EmployeeReducer.js","store/ConfigureStore.js","index.js"],"names":["Employee","props","routeToMainPage","showEmployeeInfo","state","employee","this","setFileLoadFlag","setState","employeeList","filter","emp","id","employeeId","showEmployeeFlag","to","className","onClick","first_name","Object","entries","map","key","toUpperCase","value","toString","Component","SET_EMP_DETAILS","SET_FILELOAD_FLAG","SHOW_EMP_INFO","setEmployeeDetails","employeeFields","type","actionKeys","fileLoadFlag","EmployeeConnector","React","connect","employeeReducer","dispatch","EmployeeActions","getRowId","row","columns","rows","useState","pageSize","setPageSize","pageSizes","currentPage","setCurrentPage","onCurrentPageChange","onPageSizeChange","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","length","index","deletedSet","Set","has","rowComponent","restProps","Row","e","window","confirm","style","cursor","showAddCommand","showEditCommand","showDeleteCommand","EmployeeDetails","getKeys","keys","formatData","i","empObj","j","push","forEach","fieldName","empFieldObj","name","title","fileHandler","event","fileObj","target","files","ExcelRenderer","err","resp","console","log","slice","document","getElementById","backgroundColor","onChange","EmployeeListConnector","App","exact","path","render","Boolean","location","hostname","match","rootReducer","combineReducers","initialState","action","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b4fa356.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Employee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      employee: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.setFileLoadFlag(false);\r\n    this.setState({\r\n      employee: this.props.employeeList.filter(\r\n        emp => emp.id === this.props.employeeId\r\n      )[0]\r\n    });\r\n  }\r\n  routeToMainPage = () => {\r\n    this.props.showEmployeeInfo(false, null);\r\n  };\r\n  render() {\r\n    if (!this.props.showEmployeeFlag) return <Redirect to={`/`} />;\r\n    const { employee } = this.state;\r\n    return (\r\n      <div>\r\n        <button className=\"mb-3\" onClick={this.routeToMainPage}>\r\n          Go to employee dashboard\r\n        </button>\r\n        <h3>Details of Employee - {employee.first_name}</h3>\r\n        <table className=\"table\">\r\n          <Fragment>\r\n            <thead>\r\n              <tr>\r\n                {Object.entries(employee).map(([key]) => (\r\n                  <th key={key}>{key.toUpperCase()}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                {Object.entries(employee).map(([key, value]) => (\r\n                  <td key={key}>{value.toString()}</td>\r\n                ))}\r\n              </tr>\r\n            </tbody>\r\n          </Fragment>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Employee;\r\n","export const SET_EMP_DETAILS = \"SET_EMP_DETAILS\";\r\nexport const SET_FILELOAD_FLAG = \"SET_FILELOAD_FLAG\";\r\nexport const SHOW_EMP_INFO = \"SHOW_EMP_INFO\";","import * as actionKeys from \"./ActionTypes\";\r\n\r\nexport const setEmployeeDetails = (employeeList, employeeFields) => {\r\n  return {\r\n    type: actionKeys.SET_EMP_DETAILS,\r\n    employeeList, \r\n    employeeFields\r\n  };\r\n};\r\n\r\nexport const setFileLoadFlag = (fileLoadFlag) => {\r\n  return {\r\n    type: actionKeys.SET_FILELOAD_FLAG,\r\n    fileLoadFlag\r\n  };\r\n};\r\nexport const showEmployeeInfo = (showEmployeeFlag, employeeId) => {\r\n  return {\r\n    type: actionKeys.SHOW_EMP_INFO,\r\n    showEmployeeFlag,\r\n    employeeId\r\n  };\r\n};","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport Employee from \"../components/Employee\";\r\nimport * as EmployeeActions from \"../actions/EmployeeActions\";\r\n\r\nclass EmployeeConnector extends React.Component {\r\n  render() {\r\n    return <Employee {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    employeeList: state.employeeReducer.employeeList,\r\n    employeeFields: state.employeeReducer.employeeFields,\r\n    fileLoadFlag: state.employeeReducer.fileLoadFlag,\r\n    showEmployeeFlag: state.employeeReducer.showEmployeeFlag,\r\n    employeeId: state.employeeReducer.employeeId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setEmployeeDetails: (employeeList, employeeFields) =>\r\n      dispatch(\r\n        EmployeeActions.setEmployeeDetails(employeeList, employeeFields)\r\n      ),\r\n    setFileLoadFlag: fileLoadFlag =>\r\n      dispatch(EmployeeActions.setFileLoadFlag(fileLoadFlag)),\r\n      showEmployeeInfo: (showEmployeeFlag, employeeId) =>\r\n      dispatch(EmployeeActions.showEmployeeInfo(showEmployeeFlag, employeeId))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeConnector);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  PagingState,\r\n  IntegratedPaging\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n  PagingPanel\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"./ReactGrid.scss\";\r\n\r\nconst getRowId = row => row.id;\r\n\r\nexport default props => {\r\n  const { employeeList, employeeFields } = props;\r\n  const columns = employeeFields;\r\n  const rows = employeeList;\r\n  const [pageSize, setPageSize] = useState(5);\r\n  const [pageSizes] = useState([5, 10, 15]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  const TableRow = ({ row, ...restProps }) => {\r\n    return (\r\n      <Table.Row\r\n        {...restProps}\r\n        // eslint-disable-next-line no-alert\r\n        onClick={e => {\r\n          if (window.confirm(`View details of Employee '${row.first_name}'?`)) {\r\n            props.showEmployeeInfo(true, row.id);\r\n          }\r\n        }}\r\n        style={{\r\n          cursor: \"pointer\"\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row\r\n        }))\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map(row =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n    }\r\n    props.setEmployeeDetails(changedRows, props.employeeFields);\r\n  };\r\n  return (\r\n    <div className=\"card grid-container\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <PagingState\r\n          currentPage={currentPage}\r\n          onCurrentPageChange={setCurrentPage}\r\n          pageSize={pageSize}\r\n          onPageSizeChange={setPageSize}\r\n        />\r\n        <IntegratedPaging />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table rowComponent={TableRow} {...props} />\r\n        <TableHeaderRow />\r\n        <PagingPanel pageSizes={pageSizes} />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { ExcelRenderer } from \"react-excel-renderer\";\r\nimport ReactGrid from \"./ReactGrid\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default class EmployeeDetails extends Component {\r\n  getKeys = employeeList => {\r\n    if (employeeList.length > 0) {\r\n      return Object.keys(employeeList[0]);\r\n    }\r\n  };\r\n\r\n  // convert table based json data to object based json data\r\n  formatData = rows => {\r\n    let employeeList = [];\r\n    let employeeFields = [];\r\n    for (let i = 1; i < rows.length; i++) {\r\n      let empObj = {};\r\n      empObj[\"id\"] = i;\r\n      for (let j = 0; j < rows[i].length; j++) {\r\n        let fieldName = rows[0][j];\r\n        empObj[fieldName] = rows[i][j];\r\n      }\r\n      employeeList.push(empObj);\r\n    }\r\n\r\n    this.getKeys(employeeList).forEach(fieldName => {\r\n      let empFieldObj = {\r\n        name: fieldName,\r\n        title: fieldName.toUpperCase()\r\n      };\r\n      employeeFields.push(empFieldObj);\r\n    });\r\n\r\n    return { employeeList, employeeFields };\r\n  };\r\n\r\n  // perform action on file load\r\n  fileHandler = event => {\r\n    let fileObj = event.target.files[0];\r\n\r\n    // pass the file imported as parameter\r\n    ExcelRenderer(fileObj, (err, resp) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        let { employeeList, employeeFields } = this.formatData(\r\n          resp.rows.slice(0, 50) // No of rows to be shown\r\n        );\r\n        // Update store data\r\n        this.props.setEmployeeDetails(employeeList, employeeFields);\r\n        // Set file load flat to true\r\n        this.props.setFileLoadFlag(true);\r\n        document.getElementById(\"file-input\").style.backgroundColor = \"#0fbc0f\";\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.props.showEmployeeFlag) \r\n      return <Redirect to={`/${this.props.employeeId}`} />;\r\n    \r\n    return (\r\n      <div className=\"employee-container row no-gutters\">\r\n        <h2 className=\"col-12\">Import an Excel File to proceed</h2>\r\n        <div className=\"col-12 import-btn\">\r\n          <input\r\n            id=\"file-input\"\r\n            type=\"file\"\r\n            onChange={e => {\r\n              this.fileHandler(e);\r\n            }}\r\n          />\r\n        </div>\r\n        {this.props.fileLoadFlag && (\r\n          <p className=\"col-12\">File loaded successfully!</p>\r\n        )}\r\n\r\n        <div className=\"col-12\">\r\n          {this.props.employeeList.length > 0 && (\r\n            <Fragment>\r\n              <h2>Employee Details</h2>\r\n              <ReactGrid {...this.props} />\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport * as EmployeeActions from \"../actions/EmployeeActions\";\r\nimport React from \"react\";\r\nimport EmployeeList from \"../components/EmployeeList\";\r\n\r\nclass EmployeeListConnector extends React.Component {\r\n  render() {\r\n    return <EmployeeList {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    employeeList: state.employeeReducer.employeeList,\r\n    employeeFields: state.employeeReducer.employeeFields,\r\n    fileLoadFlag: state.employeeReducer.fileLoadFlag,\r\n    showEmployeeFlag: state.employeeReducer.showEmployeeFlag,\r\n    employeeId: state.employeeReducer.employeeId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setEmployeeDetails: (employeeList, employeeFields) =>\r\n      dispatch(\r\n        EmployeeActions.setEmployeeDetails(employeeList, employeeFields)\r\n      ),\r\n    setFileLoadFlag: fileLoadFlag =>\r\n      dispatch(EmployeeActions.setFileLoadFlag(fileLoadFlag)),\r\n    showEmployeeInfo: (showEmployeeFlag, employeeId) =>\r\n      dispatch(EmployeeActions.showEmployeeInfo(showEmployeeFlag, employeeId))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(EmployeeListConnector);\r\n","import React, { Component } from \"react\";\r\nimport EmployeeConnector from \"./connectors/EmployeeConnector\";\r\nimport EmployeeListConnector from \"./connectors/EmployeeListConnector\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <HashRouter>\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <EmployeeListConnector />} />\r\n            <Route path=\"/:id\" render={() => <EmployeeConnector />} />\r\n          </Switch>\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default {\r\n  fileLoadFlag: false,\r\n  employeeList: [],\r\n  employeeFields: [],\r\n  showEmployeeFlag: false,\r\n  employeeId: null\r\n};\r\n","\r\nimport {combineReducers} from 'redux';\r\nimport employeeReducer from './EmployeeReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  employeeReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import initialState from \"./InitialState\";\r\nimport * as actionKeys from \"../actions/ActionTypes\";\r\n\r\nexport default function employeeReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionKeys.SET_EMP_DETAILS:\r\n      return {\r\n        ...state,\r\n        employeeList: action.employeeList,\r\n        employeeFields: action.employeeFields\r\n      };\r\n    case actionKeys.SET_FILELOAD_FLAG:\r\n      return {\r\n        ...state,\r\n        fileLoadFlag: action.fileLoadFlag\r\n      };\r\n    case actionKeys.SHOW_EMP_INFO:\r\n      return {\r\n        ...state,\r\n        showEmployeeFlag: action.showEmployeeFlag,\r\n        employeeId: action.employeeId\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from '../reducers/RootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore() {\r\n  return createStore(\r\n    rootReducer,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from \"./store/ConfigureStore\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}